[{"/Users/andela/Desktop/ireneetasks/src/index.js":"1","/Users/andela/Desktop/ireneetasks/src/App.js":"2","/Users/andela/Desktop/ireneetasks/src/reportWebVitals.js":"3","/Users/andela/Desktop/ireneetasks/src/components/login.js":"4","/Users/andela/Desktop/ireneetasks/src/components/Navbar.js":"5","/Users/andela/Desktop/ireneetasks/src/components/TextField.js":"6"},{"size":500,"mtime":1611384689362,"results":"7","hashOfConfig":"8"},{"size":232,"mtime":1611780606518,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611384689369,"results":"10","hashOfConfig":"8"},{"size":2592,"mtime":1612475461815,"results":"11","hashOfConfig":"8"},{"size":746,"mtime":1611954674056,"results":"12","hashOfConfig":"8"},{"size":681,"mtime":1612125469555,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"8v396m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/Users/andela/Desktop/ireneetasks/src/index.js",[],["28","29"],"/Users/andela/Desktop/ireneetasks/src/App.js",[],"/Users/andela/Desktop/ireneetasks/src/reportWebVitals.js",[],"/Users/andela/Desktop/ireneetasks/src/components/login.js",[],"/Users/andela/Desktop/ireneetasks/src/components/Navbar.js",[],"/Users/andela/Desktop/ireneetasks/src/components/TextField.js",["30"],"import React from 'react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, ...props}) => {\n    const [field, meta] = useField(props);\n    \n    return (\n        <div>\n            <label  className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\"  htmlFor={field.name}>{label}</label>\n            <input type=\"text\"  className=\"border border-black-50 rounded w-full text-gray-700 focus:outline-none   transition duration-500 px-3 pb-3\"\n            {...field} {...props}\n            autoComplete=\"off\"\n            />\n            <div className=\"text-red-500\">\n            <ErrorMessage name={field.name}/>\n            </div>\n        </div>\n    )\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":5,"column":19,"nodeType":"37","messageId":"38","endLine":5,"endColumn":23},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'meta' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]